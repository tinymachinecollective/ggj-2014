using GGJ2014.Game.Engine;
using GGJ2014.Game.Engine.Controls;
using Microsoft.Xna.Framework;
using Microsoft.Xna.Framework.Graphics;
using Microsoft.Xna.Framework.Input;

namespace GGJ2014.Game.Logic
{
    public class GameScreen : Screen
    {
        private Player player;
        private Monster monster;
        private SpriteBatch spriteBatch;
        private Level level;

        public GameScreen(GraphicsDevice graphicsDevice) : base(graphicsDevice)
        {
            this.spriteBatch = new SpriteBatch(graphicsDevice);
            this.LoadContent();
        }

        public void LoadContent()
        {
            this.player = new Player();
            this.player.Initialize(new MouseInputController(player));

            this.monster = new Monster();
            this.monster.Initialize(new AIController(monster));

            this.level = new Level();
            this.level.Load();
        }

        public override void Draw(Bounds bounds)
        {
            this.spriteBatch.Begin();

            Vector2 cameraPos = player.Position - BigEvilStatic.GetScreenCentre();

            this.level.Draw(spriteBatch, cameraPos);
            this.player.Draw(spriteBatch, cameraPos);
            this.monster.Draw(spriteBatch, cameraPos);

            this.spriteBatch.End();
        }

        public override void Update(GameTime time)
        {
            this.level.Update(time);
            player.Update(time);
<<<<<<< Updated upstream
            monster.Update(time, player.Position);

            if (Keyboard.GetState().IsKeyDown(Keys.F2))
            {
                BigEvilStatic.ScreenManager.OpenScreen(new EditorScreen(this.Device));
            }
        }
    }
}
=======
            monster.Update(time, player.LastPosition);

            if (Keyboard.GetState().IsKeyDown(Keys.F2))
            {
                BigEvilStatic.ScreenManager.OpenScreen(new EditorScreen(this.Device));
            }
        }
    }
}
>>>>>>> Stashed changes
